"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.convert = convert;var _jsonMapperJson = _interopRequireDefault(require("json-mapper-json"));function _interopRequireWildcard(e, t) {if ("function" == typeof WeakMap) var r = new WeakMap(),n = new WeakMap();return (_interopRequireWildcard = function (e, t) {if (!t && e && e.__esModule) return e;var o,i,f = { __proto__: null, default: e };if (null === e || "object" != typeof e && "function" != typeof e) return f;if (o = t ? n : r) {if (o.has(e)) return o.get(e);o.set(e, f);}for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]);return f;})(e, t);}

async function convert(prefix, data, event) {
  try {
    data.event = event || data.event;
    event = data.event.indexOf('message') >= 0 ? 'message' : data.event;

    const mappConfEvent = await config_event(prefix, event);
    const mappConfType = await config_type(prefix, event, data.type);

    Object.assign(mappConfEvent, mappConfType);

    // console.log('mappConfEvent', mappConfEvent);

    if (!mappConfEvent) return data;
    return await (0, _jsonMapperJson.default)(data, mappConfEvent);
  } catch (e) {
    return data;
  }
}

async function config_event(prefix, event) {
  try {
    const { default: mappConf } = await ((specifier) => new Promise((r) => r(specifier)).then((s) => _interopRequireWildcard(require(s))))(`./${prefix}${event}.js`);
    if (!mappConf) return undefined;
    return mappConf;
  } catch (e) {
    return undefined;
  }
}

async function config_type(prefix, event, type) {
  try {
    const { default: mappConf } = await ((specifier) => new Promise((r) => r(specifier)).then((s) => _interopRequireWildcard(require(s))))(
      `./${prefix}${event}-${type}.js`);

    if (!mappConf) return undefined;
    return mappConf;
  } catch (e) {
    return undefined;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfanNvbk1hcHBlckpzb24iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiY29udmVydCIsInByZWZpeCIsImRhdGEiLCJldmVudCIsImluZGV4T2YiLCJtYXBwQ29uZkV2ZW50IiwiY29uZmlnX2V2ZW50IiwibWFwcENvbmZUeXBlIiwiY29uZmlnX3R5cGUiLCJ0eXBlIiwiYXNzaWduIiwibWFwcGVyIiwibWFwcENvbmYiLCJzcGVjaWZpZXIiLCJQcm9taXNlIiwidGhlbiIsInMiLCJ1bmRlZmluZWQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFwcGVyL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtYXBwZXIgZnJvbSAnanNvbi1tYXBwZXItanNvbic7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29udmVydChwcmVmaXg6IHN0cmluZywgZGF0YTogYW55LCBldmVudD86IGFueSkge1xyXG4gIHRyeSB7XHJcbiAgICBkYXRhLmV2ZW50ID0gZXZlbnQgfHwgZGF0YS5ldmVudDtcclxuICAgIGV2ZW50ID0gZGF0YS5ldmVudC5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCA/ICdtZXNzYWdlJyA6IGRhdGEuZXZlbnQ7XHJcblxyXG4gICAgY29uc3QgbWFwcENvbmZFdmVudCA9IGF3YWl0IGNvbmZpZ19ldmVudChwcmVmaXgsIGV2ZW50KTtcclxuICAgIGNvbnN0IG1hcHBDb25mVHlwZSA9IGF3YWl0IGNvbmZpZ190eXBlKHByZWZpeCwgZXZlbnQsIGRhdGEudHlwZSk7XHJcblxyXG4gICAgT2JqZWN0LmFzc2lnbihtYXBwQ29uZkV2ZW50LCBtYXBwQ29uZlR5cGUpO1xyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKCdtYXBwQ29uZkV2ZW50JywgbWFwcENvbmZFdmVudCk7XHJcblxyXG4gICAgaWYgKCFtYXBwQ29uZkV2ZW50KSByZXR1cm4gZGF0YTtcclxuICAgIHJldHVybiBhd2FpdCBtYXBwZXIoZGF0YSwgbWFwcENvbmZFdmVudCk7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBjb25maWdfZXZlbnQocHJlZml4OiBhbnksIGV2ZW50OiBhbnkpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBkZWZhdWx0OiBtYXBwQ29uZiB9ID0gYXdhaXQgaW1wb3J0KGAuLyR7cHJlZml4fSR7ZXZlbnR9LmpzYCk7XHJcbiAgICBpZiAoIW1hcHBDb25mKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgcmV0dXJuIG1hcHBDb25mO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBjb25maWdfdHlwZShwcmVmaXg6IGFueSwgZXZlbnQ6IGFueSwgdHlwZTogYW55KSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgZGVmYXVsdDogbWFwcENvbmYgfSA9IGF3YWl0IGltcG9ydChcclxuICAgICAgYC4vJHtwcmVmaXh9JHtldmVudH0tJHt0eXBlfS5qc2BcclxuICAgICk7XHJcbiAgICBpZiAoIW1hcHBDb25mKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgcmV0dXJuIG1hcHBDb25mO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IjBMQUFBLElBQUFBLGVBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQSxzQkFBc0Ms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