"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;














var _bcrypt = _interopRequireDefault(require("bcrypt"));


var _sessionUtil = require("../util/sessionUtil"); /*
 * Copyright 2021 WPPConnect Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function formatSession(session) {return session.split(':')[0];}const verifyToken = (req, res, next) => {const secureToken = req.serverOptions.secretKey;const { session } = req.params;const { authorization: token } = req.headers;if (!session) return res.status(401).send({ message: 'Session not informed' });try {
    let tokenDecrypt = '';
    let sessionDecrypt = '';

    try {
      sessionDecrypt = session.split(':')[0];
      tokenDecrypt = session.
      split(':')[1].
      replace(/_/g, '/').
      replace(/-/g, '+');
    } catch (error) {
      try {
        if (token && token !== '' && token.split(' ').length > 0) {
          const token_value = token.split(' ')[1];
          if (token_value)
          tokenDecrypt = token_value.replace(/_/g, '/').replace(/-/g, '+');else

          return res.status(401).json({
            message: 'Token is not present. Check your header and try again'
          });
        } else {
          return res.status(401).json({
            message: 'Token is not present. Check your header and try again'
          });
        }
      } catch (e) {
        req.logger.error(e);
        return res.status(401).json({
          error: 'Check that a Session and Token are correct',
          message: error
        });
      }
    }

    _bcrypt.default.compare(
      sessionDecrypt + secureToken,
      tokenDecrypt,
      function (err, result) {
        if (result) {
          req.session = formatSession(req.params.session);
          req.token = tokenDecrypt;
          req.client = _sessionUtil.clientsArray[req.session];
          next();
        } else {
          return res.
          status(401).
          json({ error: 'Check that the Session and Token are correct' });
        }
      }
    );
  } catch (error) {
    req.logger.error(error);
    return res.status(401).json({
      error: 'Check that the Session and Token are correct.',
      message: error
    });
  }
};var _default = exports.default =

verifyToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYmNyeXB0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfc2Vzc2lvblV0aWwiLCJmb3JtYXRTZXNzaW9uIiwic2Vzc2lvbiIsInNwbGl0IiwidmVyaWZ5VG9rZW4iLCJyZXEiLCJyZXMiLCJuZXh0Iiwic2VjdXJlVG9rZW4iLCJzZXJ2ZXJPcHRpb25zIiwic2VjcmV0S2V5IiwicGFyYW1zIiwiYXV0aG9yaXphdGlvbiIsInRva2VuIiwiaGVhZGVycyIsInN0YXR1cyIsInNlbmQiLCJtZXNzYWdlIiwidG9rZW5EZWNyeXB0Iiwic2Vzc2lvbkRlY3J5cHQiLCJyZXBsYWNlIiwiZXJyb3IiLCJsZW5ndGgiLCJ0b2tlbl92YWx1ZSIsImpzb24iLCJlIiwibG9nZ2VyIiwiYmNyeXB0IiwiY29tcGFyZSIsImVyciIsInJlc3VsdCIsImNsaWVudCIsImNsaWVudHNBcnJheSIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbWlkZGxld2FyZS9hdXRoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIENvcHlyaWdodCAyMDIxIFdQUENvbm5lY3QgVGVhbVxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmltcG9ydCBiY3J5cHQgZnJvbSAnYmNyeXB0JztcclxuaW1wb3J0IHsgTmV4dEZ1bmN0aW9uLCBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xyXG5cclxuaW1wb3J0IHsgY2xpZW50c0FycmF5IH0gZnJvbSAnLi4vdXRpbC9zZXNzaW9uVXRpbCc7XHJcblxyXG5mdW5jdGlvbiBmb3JtYXRTZXNzaW9uKHNlc3Npb246IHN0cmluZykge1xyXG4gIHJldHVybiBzZXNzaW9uLnNwbGl0KCc6JylbMF07XHJcbn1cclxuXHJcbmNvbnN0IHZlcmlmeVRva2VuID0gKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKTogYW55ID0+IHtcclxuICBjb25zdCBzZWN1cmVUb2tlbiA9IHJlcS5zZXJ2ZXJPcHRpb25zLnNlY3JldEtleTtcclxuXHJcbiAgY29uc3QgeyBzZXNzaW9uIH0gPSByZXEucGFyYW1zO1xyXG4gIGNvbnN0IHsgYXV0aG9yaXphdGlvbjogdG9rZW4gfSA9IHJlcS5oZWFkZXJzO1xyXG4gIGlmICghc2Vzc2lvbilcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuc2VuZCh7IG1lc3NhZ2U6ICdTZXNzaW9uIG5vdCBpbmZvcm1lZCcgfSk7XHJcblxyXG4gIHRyeSB7XHJcbiAgICBsZXQgdG9rZW5EZWNyeXB0ID0gJyc7XHJcbiAgICBsZXQgc2Vzc2lvbkRlY3J5cHQgPSAnJztcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBzZXNzaW9uRGVjcnlwdCA9IHNlc3Npb24uc3BsaXQoJzonKVswXTtcclxuICAgICAgdG9rZW5EZWNyeXB0ID0gc2Vzc2lvblxyXG4gICAgICAgIC5zcGxpdCgnOicpWzFdXHJcbiAgICAgICAgLnJlcGxhY2UoL18vZywgJy8nKVxyXG4gICAgICAgIC5yZXBsYWNlKC8tL2csICcrJyk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGlmICh0b2tlbiAmJiB0b2tlbiAhPT0gJycgJiYgdG9rZW4uc3BsaXQoJyAnKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBjb25zdCB0b2tlbl92YWx1ZSA9IHRva2VuLnNwbGl0KCcgJylbMV07XHJcbiAgICAgICAgICBpZiAodG9rZW5fdmFsdWUpXHJcbiAgICAgICAgICAgIHRva2VuRGVjcnlwdCA9IHRva2VuX3ZhbHVlLnJlcGxhY2UoL18vZywgJy8nKS5yZXBsYWNlKC8tL2csICcrJyk7XHJcbiAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XHJcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1Rva2VuIGlzIG5vdCBwcmVzZW50LiBDaGVjayB5b3VyIGhlYWRlciBhbmQgdHJ5IGFnYWluJyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XHJcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdUb2tlbiBpcyBub3QgcHJlc2VudC4gQ2hlY2sgeW91ciBoZWFkZXIgYW5kIHRyeSBhZ2FpbicsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICByZXEubG9nZ2VyLmVycm9yKGUpO1xyXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XHJcbiAgICAgICAgICBlcnJvcjogJ0NoZWNrIHRoYXQgYSBTZXNzaW9uIGFuZCBUb2tlbiBhcmUgY29ycmVjdCcsXHJcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvcixcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGJjcnlwdC5jb21wYXJlKFxyXG4gICAgICBzZXNzaW9uRGVjcnlwdCArIHNlY3VyZVRva2VuLFxyXG4gICAgICB0b2tlbkRlY3J5cHQsXHJcbiAgICAgIGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xyXG4gICAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgIHJlcS5zZXNzaW9uID0gZm9ybWF0U2Vzc2lvbihyZXEucGFyYW1zLnNlc3Npb24pO1xyXG4gICAgICAgICAgcmVxLnRva2VuID0gdG9rZW5EZWNyeXB0O1xyXG4gICAgICAgICAgcmVxLmNsaWVudCA9IGNsaWVudHNBcnJheVtyZXEuc2Vzc2lvbl07XHJcbiAgICAgICAgICBuZXh0KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiByZXNcclxuICAgICAgICAgICAgLnN0YXR1cyg0MDEpXHJcbiAgICAgICAgICAgIC5qc29uKHsgZXJyb3I6ICdDaGVjayB0aGF0IHRoZSBTZXNzaW9uIGFuZCBUb2tlbiBhcmUgY29ycmVjdCcgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICByZXEubG9nZ2VyLmVycm9yKGVycm9yKTtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XHJcbiAgICAgIGVycm9yOiAnQ2hlY2sgdGhhdCB0aGUgU2Vzc2lvbiBhbmQgVG9rZW4gYXJlIGNvcnJlY3QuJyxcclxuICAgICAgbWVzc2FnZTogZXJyb3IsXHJcbiAgICB9KTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB2ZXJpZnlUb2tlbjtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7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